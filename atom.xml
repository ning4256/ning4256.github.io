<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小凡的个人博客</title>
  
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-26T14:04:34.554Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小凡的耿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mongoDB的使用</title>
    <link href="http://yoursite.com/2018/10/25/mongoDB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/25/mongoDB的使用/</id>
    <published>2018-10-25T14:46:08.000Z</published>
    <updated>2018-10-26T14:04:34.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是MongoDB？"><a href="#什么是MongoDB？" class="headerlink" title="什么是MongoDB？"></a>什么是MongoDB？</h2><ol><li>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</li><li>在高负载的情况下，添加更多的节点，可以保证服务器性能。</li><li>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</li><li>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</li></ol><a id="more"></a><h2 id="MongoDB的安装"><a href="#MongoDB的安装" class="headerlink" title="MongoDB的安装"></a>MongoDB的安装</h2><p>具体细节请参照<a href="http://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="noopener">该网站自行配置</a></p><h2 id="MongoDB概念解析"><a href="#MongoDB概念解析" class="headerlink" title="MongoDB概念解析"></a>MongoDB概念解析</h2><p><strong>MongoDB的存储结构</strong>和以前我们的关系型数据库的数据结构都是顶层是库，库下面是表，表下面是数据。但是MongoDB有所不同，库下面是集合，集合下面是文件</p><h2 id="基础Shell命令"><a href="#基础Shell命令" class="headerlink" title="基础Shell命令"></a>基础Shell命令</h2><ol><li>show dbs :显示已有数据库，如果你刚安装好，会默认有local、admin(config)，这是MongoDB的默认数据库，我们在新建库时是不允许起这些名称的。</li><li>use admin： 进入数据，也可以理解成为使用数据库。成功会显示：switched to db admin。</li><li>show collections: 显示数据库中的集合（关系型中叫表，我们要逐渐熟悉）。</li><li>db:显示当前位置，也就是你当前使用的数据库名称，这个命令算是最常用的，因为你在作任何操作的时候都要先查看一下自己所在的库，以免造成操作错误。</li></ol><h2 id="数据操作基础命令"><a href="#数据操作基础命令" class="headerlink" title="数据操作基础命令"></a>数据操作基础命令</h2><ol><li>use db（建立数据库）：use不仅可以进入一个数据库，如果你敲入的库不存在，它还可以帮你建立一个库。但是在没有集合前，它还是默认为空。</li><li>db.集合.insert( ):新建数据集合和插入文件（数据），当集合没有时，这时候就可以新建一个集合，并向里边插入数据。Demo：db.user.insert({“name”:”jspang”})</li><li>db.集合.find( ):查询所有数据，这条命令会列出集合下的所有数据，可以看到MongoDB是自动给我们加入了索引值的。Demo：db.user.find()</li><li>db.集合.findOne( ):查询第一个文件数据，这里需要注意的，所有MongoDB的组合单词都使用首字母小写的驼峰式写法。</li><li>db.集合.update({查询},{修改}):修改文件数据，第一个是查询条件，第二个是要修改成的值。这里注意的是可以多加文件数据项的，比如下面的例子。</li><li>db.集合.remove(条件)：删除文件数据，注意的是要跟一个条件。Demo:db.user.remove({“name”:”jspang”})</li><li>db.集合.drop( ):删除整个集合，这个在实际工作中一定要谨慎使用，如果是程序，一定要二次确认。</li><li>db.dropDatabase( ):删除整个数据库，在删除库时，一定要先进入数据库，然后再删除。实际工作中这个基本不用，实际工作可定需要保留数据和痕迹的。</li></ol><h2 id="mongoose的使用"><a href="#mongoose的使用" class="headerlink" title="mongoose的使用"></a>mongoose的使用</h2><p><strong>Mongoose是一个开源的封装好的实现Node和MongoDB数据通讯的数据建模库。</strong></p><h3 id="mongoose的安装"><a href="#mongoose的安装" class="headerlink" title="mongoose的安装"></a>mongoose的安装</h3><p><code>npm i mongoose -S</code></p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>在<code>database</code>目录下新建一个<code>init.js</code>文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">const mongoose = require(&apos;mongoose&apos;)</span><br><span class="line">const db = &quot;mongodb://localhost/smile-db&quot;</span><br><span class="line">exports.connect = ()=&gt;&#123;</span><br><span class="line">  //连接数据库</span><br><span class="line">  mongoose.connect(db)</span><br><span class="line"></span><br><span class="line">  let maxConnectTimes = 0 </span><br><span class="line">  return  new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    //把所有连接放到这里</span><br><span class="line">    //增加数据库监听事件</span><br><span class="line">    mongoose.connection.on(&apos;disconnected&apos;,()=&gt;&#123;</span><br><span class="line">      console.log(&apos;***********数据库断开***********&apos;)</span><br><span class="line">        if(maxConnectTimes&lt;3)&#123;</span><br><span class="line">          maxConnectTimes++</span><br><span class="line">          mongoose.connect(db)    </span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          reject()</span><br><span class="line">          throw new Error(&apos;数据库出现问题，程序无法搞定，请人为修理......&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    mongoose.connection.on(&apos;error&apos;,err=&gt;&#123;</span><br><span class="line">      console.log(&apos;***********数据库错误***********&apos;)</span><br><span class="line">      if(maxConnectTimes&lt;3)&#123;</span><br><span class="line">        maxConnectTimes++</span><br><span class="line">        mongoose.connect(db)   </span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        reject(err)</span><br><span class="line">          throw new Error(&apos;数据库出现问题，程序无法搞定，请人为修理......&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    //链接打开的时</span><br><span class="line">    mongoose.connection.once(&apos;open&apos;,()=&gt;&#123;</span><br><span class="line">      console.log(&apos;MongoDB connected successfully&apos;) </span><br><span class="line">      resolve()   </span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Mongoose的Schema建模"><a href="#Mongoose的Schema建模" class="headerlink" title="Mongoose的Schema建模"></a>Mongoose的Schema建模</h3><p><strong>Schema是以key-value形式Json格式的数据。</strong></p><p><strong>Schema中的数据类型</strong></p><ul><li>String ：字符串类型</li><li>Number ：数字类型</li><li>Date ： 日期类型</li><li>Boolean： 布尔类型</li><li>Buffer ： NodeJS buffer 类型</li><li>ObjectID ： 主键,一种特殊而且非常重要的类型</li><li>Mixed ：混合类型</li><li>Array ：集合类型</li></ul><h4 id="Mongoose中的三个概念"><a href="#Mongoose中的三个概念" class="headerlink" title="Mongoose中的三个概念"></a>Mongoose中的三个概念</h4><ol><li>schema ：用来定义表的模版，实现和MongoDB数据库的映射。用来实现每个字段的类型，长度，映射的字段，不具备表的操作能力。</li><li>model ：具备某张表操作能力的一个集合，是mongoose的核心能力。我们说的模型就是这个Mondel。</li><li>entity ：类似记录，由Model创建的实体，也具有影响数据库的操作能力。</li></ol><h4 id="初学定义一个Schema"><a href="#初学定义一个Schema" class="headerlink" title="初学定义一个Schema"></a>初学定义一个Schema</h4><p>我们在<code>database</code>文件夹下新建一个<code>Schema</code>文件下，然后创建一个<code>use.js</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const mongoose = require(&apos;mongoose&apos;)    //引入Mongoose</span><br><span class="line">const Schema = mongoose.Schema          //声明Schema</span><br><span class="line">let ObjectId = Schema.Types.ObjectId    //声明Object类型</span><br><span class="line">//创建我们的用户Schema</span><br><span class="line">const userSchema = new Schema(&#123;</span><br><span class="line">    UserId:ObjectId,</span><br><span class="line">    userName:&#123;unique:true,type:String&#125;,</span><br><span class="line">    password:String,</span><br><span class="line">    createAt:&#123;type:Date,default:Date.now()&#125;,</span><br><span class="line">    lastLoginAt:&#123;type:Date,default:Date.now()&#125;</span><br><span class="line">&#125;)</span><br><span class="line">//发布模型</span><br><span class="line">mongoose.model(&apos;User&apos;,userSchema)</span><br></pre></td></tr></table></figure></p><h2 id="载入Schema和插入查出数据"><a href="#载入Schema和插入查出数据" class="headerlink" title="载入Schema和插入查出数据"></a>载入Schema和插入查出数据</h2><p>我们在<code>init.js</code>文件中处理<strong>Schema</strong>。首先我们载入所有的<code>Schema</code>，然后再处理。<br>安装<em>glob</em><br><code>npm i glob -S</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const glob = require(&apos;glob&apos;)</span><br><span class="line">const &#123;resolve&#125; = require(&apos;path&apos;) //将一系列相对路径替换成绝对路径</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.initSchemas = () =&gt;&#123;</span><br><span class="line">    glob.sync(resolve(__dirname,&apos;./schema/&apos;,&apos;**/*.js&apos;)).forEach(require)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;)</span><br><span class="line">const app = new Koa()</span><br><span class="line">const mongoose = require(&apos;mongoose&apos;)</span><br><span class="line">const &#123;connect , initSchemas&#125; = require(&apos;./database/init.js&apos;)</span><br><span class="line">//立即执行函数</span><br><span class="line">;(async () =&gt;&#123;</span><br><span class="line">    await connect()</span><br><span class="line">    initSchemas()</span><br><span class="line">    const User = mongoose.model(&apos;User&apos;)</span><br><span class="line">    let oneUser = new User(&#123;userName:&apos;jspang13&apos;,password:&apos;123456&apos;&#125;)</span><br><span class="line">    oneUser.save().then(()=&gt;&#123;</span><br><span class="line">        console.log(&apos;插入成功&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">let  users = await  User.findOne(&#123;&#125;).exec()</span><br><span class="line">console.log(&apos;------------------&apos;)</span><br><span class="line">console.log(users)</span><br><span class="line">console.log(&apos;------------------&apos;)  </span><br><span class="line">&#125;)()</span><br><span class="line">app.use(async(ctx)=&gt;&#123;</span><br><span class="line">    ctx.body = &apos;&lt;h1&gt;hello Koa2&lt;/h1&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;[Server] starting at port 3000&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是MongoDB？&quot;&gt;&lt;a href=&quot;#什么是MongoDB？&quot; class=&quot;headerlink&quot; title=&quot;什么是MongoDB？&quot;&gt;&lt;/a&gt;什么是MongoDB？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。&lt;/li&gt;
&lt;li&gt;在高负载的情况下，添加更多的节点，可以保证服务器性能。&lt;/li&gt;
&lt;li&gt;MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。&lt;/li&gt;
&lt;li&gt;MongoDB 将数据存储为一个文档，数据结构由键值(key=&amp;gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="http://yoursite.com/categories/MongoDB/"/>
    
    
      <category term="MongoDB,数据库" scheme="http://yoursite.com/tags/MongoDB-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>node学习</title>
    <link href="http://yoursite.com/2018/10/24/node%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/10/24/node学习/</id>
    <published>2018-10-24T10:42:47.000Z</published>
    <updated>2018-10-26T13:25:07.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node-js是什么？"><a href="#Node-js是什么？" class="headerlink" title="Node.js是什么？"></a>Node.js是什么？</h2><ol><li>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 </li><li>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。</li></ol><a id="more"></a><h2 id="Node-js的安装和配置"><a href="#Node-js的安装和配置" class="headerlink" title="Node.js的安装和配置"></a>Node.js的安装和配置</h2><p>这个在这里不过多阐述，更多内容请自行百度。</p><h2 id="第一个Node-js文件"><a href="#第一个Node-js文件" class="headerlink" title="第一个Node.js文件"></a>第一个Node.js文件</h2><p>在一个目录下创建一个<code>nodejs</code>的文件夹,同时在该文件夹下创建一个<code>HelloWorld.js</code>文件，其内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;Hello,World!&apos;);</span><br></pre></td></tr></table></figure></p><p>然后打开终端，进入该文件目录下，使用<code>node HelloWorld.js</code>就可以在终端看到 <strong>Hello,World!</strong>的字了，并且第一个nodejs文件就完成了。</p><h2 id="node核心模块"><a href="#node核心模块" class="headerlink" title="node核心模块"></a>node核心模块</h2><p>node具有众多的核心模块，比较常用的有 <strong>fs,http,path</strong>等</p><h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><p>fs是node中用于 <strong>读取文件</strong>的，它常用的有 <strong>readFile()和writeFile()</strong>这两个方法，第一个参数都是文件地址，<em>readFile()</em>第二个参数就是一个回调函数，而<em>writeFile()</em>由于是写文件，故应当有写入内容，所以其第二个参数是data(string)，然后跟一个回调函数。</p><p>readFile()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;1.txt&apos;, (error, data) =&gt; &#123;</span><br><span class="line">  if(error) &#123;</span><br><span class="line">    console.log(&apos;读取文件失败，请稍后再试&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    console.log(data.toString())  //读取的数据大多是二进制数据，所以需要将其转换为字符类型</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>同理，writeFile()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.writeFile(&apos;2.txt&apos;, &apos;我是写入的内容&apos;, (error) =&gt; &#123;</span><br><span class="line">  if(error) &#123;</span><br><span class="line">    console.log(&apos;写入文件失败，请稍后再试&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    console.log(&apos;写入文件成功&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>比较上面两段代码，可以清楚的知道，readFile()方法有两个参数，而回调函数中有两个参数（error和data）；而writeFile()方法有三个参数，而回调函数就只有一个参数（error）了。</p><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><p>http模块主要用于搭建http服务器，我们可以利用其构建后端服务，使我们的应用在web服务器上使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http)</span><br><span class="line">var server = http.createServer()</span><br><span class="line">server.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">  var url = res.url;</span><br><span class="line">  if(url === &apos;/&apos;) &#123;</span><br><span class="line">    fs.readFile(&apos;./index.html&apos;, (error, data) =&gt; &#123;</span><br><span class="line">    if(error) &#123;</span><br><span class="line">      res.setHeader(&apos;Content-Type&apos;, &apos;text/plain;charset=utf-8&apos;)</span><br><span class="line">      res.end(&apos;读取文件失败，请稍后再试！&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      res.setHeader(&apos;Content-Type&apos;, &apos;text/html;charset=utf-8&apos;)</span><br><span class="line">      res.end(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(3000, () =&gt; &#123;</span><br><span class="line">  console.log(&apos;The server is starting at port 3000!&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>常用查询<a href="http://tool.oschina.net/" target="_blank" rel="noopener">Content-Type的网站</a></p><h2 id="node实现Apache"><a href="#node实现Apache" class="headerlink" title="node实现Apache"></a>node实现Apache</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;)</span><br><span class="line">var fs = require(&apos;fs&apos;)</span><br><span class="line">var server = http.createServer()</span><br><span class="line"></span><br><span class="line">server.on(&apos;request&apos;, function(req, res) &#123;</span><br><span class="line">  var url = req.url</span><br><span class="line">  var pathFile = &apos;index.html&apos;</span><br><span class="line">  if(pathFile !== &apos;/&apos;) &#123;</span><br><span class="line">    pathFile = url</span><br><span class="line">  &#125;</span><br><span class="line">  fs.readFile(pathFile, function(err, data) &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">      console.log(&apos;读取文件失败&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      res.end(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(3000, function() &#123;</span><br><span class="line">  console.log(&apos;the server is starting at port 3000!&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><p>express作为一个被node封装好的http框架，使用十分频繁和场景。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var app = new express()</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class="line">  res.end(&apos;这是主页面&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000, function() &#123;</span><br><span class="line">  console.log(&apos;The server is starting at port 3000!&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="使用express完成一个crud"><a href="#使用express完成一个crud" class="headerlink" title="使用express完成一个crud"></a>使用express完成一个crud</h3><ol><li><p>模版引擎的安装<br><code>npm i art-template express-art-template -S</code><br>在文件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">配置art-template模版引擎</span><br><span class="line">app.engine(&apos;html&apos;, require(&apos;express-art-template&apos;))</span><br><span class="line">渲染模版引擎</span><br><span class="line">res.render(&apos;index.html&apos;, &#123;</span><br><span class="line">  //  传入的对象通常是字符串需要通过JSON.parse()转移</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 引包</span><br><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var fs = require(&apos;fs&apos;)</span><br><span class="line"></span><br><span class="line">// 创建服务器</span><br><span class="line">var app = new express()</span><br><span class="line"></span><br><span class="line">// 配置公共资源</span><br><span class="line">app.use(&apos;/public/&apos;, express.static(&apos;./public&apos;))</span><br><span class="line"></span><br><span class="line">app.engine(&apos;html&apos;, require(&apos;express-art-template&apos;))</span><br><span class="line">// 配置请求</span><br><span class="line">app.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class="line">  fs.readFile(&apos;./db.json&apos;, &apos;utf8&apos;, function(err, data) &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">      return res.status(500).send(&apos;error!&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.render(&apos;index.html&apos;, &#123;</span><br><span class="line">      user: JSON.parse(data).user</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 监听请求</span><br><span class="line">app.listen(3000,function() &#123;</span><br><span class="line">  console.log(&apos;running 3000&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="router路由模块"><a href="#router路由模块" class="headerlink" title="router路由模块"></a>router路由模块</h3><p>通常情况下，我们将需要请求的路径封装成一个<code>router.js</code>文件，里面封装好我们需要的路径和相应的请求回调函数和逻辑，使我们的文件逻辑清晰。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var router = express.Router()</span><br><span class="line">var fs = require(&apos;fs&apos;)</span><br><span class="line"></span><br><span class="line">router.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class="line">  fs.readFile(&apos;./db.json&apos;, &apos;utf8&apos;, function(err, data) &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">      return res.status(500).send(&apos;error!&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.render(&apos;index.html&apos;, &#123;</span><br><span class="line">      user: JSON.parse(data).user</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">router.get(&apos;/students&apos;, function(req, res) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">router.post(&apos;/students&apos;, function(req, res) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">router.get(&apos;/students/new&apos;, function(req, res) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(&apos;/students/new&apos;, function(req, res) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = router</span><br></pre></td></tr></table></figure></p><p>而在我们的<code>app.js</code>文件中就可以写成这样了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 引包</span><br><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var router = require(&apos;./router.js&apos;)</span><br><span class="line"></span><br><span class="line">// 创建服务器</span><br><span class="line">var app = new express()</span><br><span class="line"></span><br><span class="line">// 配置公共资源</span><br><span class="line">app.use(&apos;/public/&apos;, express.static(&apos;./public&apos;))</span><br><span class="line"></span><br><span class="line">// 使用路由</span><br><span class="line">app.use(router)</span><br><span class="line"></span><br><span class="line">app.engine(&apos;html&apos;, require(&apos;express-art-template&apos;))</span><br><span class="line">// 配置请求</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 监听请求</span><br><span class="line">app.listen(3000,function() &#123;</span><br><span class="line">  console.log(&apos;running 3000&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = app</span><br></pre></td></tr></table></figure></p><p>最后完整版<br><code>app.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//引包</span><br><span class="line">const express=require(&apos;express&apos;);</span><br><span class="line">const fs=require(&apos;fs&apos;);</span><br><span class="line">const bodyParser=require(&apos;body-parser&apos;);</span><br><span class="line">//用户路由router</span><br><span class="line">const user=require(&apos;./router/user&apos;);</span><br><span class="line"></span><br><span class="line">//创建服务器</span><br><span class="line">const app=express();</span><br><span class="line"></span><br><span class="line">//配置公共资源</span><br><span class="line">app.use(express.static(&apos;./public&apos;));</span><br><span class="line"></span><br><span class="line">//配置使用art-template 模版引擎</span><br><span class="line">app.engine(&apos;html&apos;,require(&apos;express-art-template&apos;));</span><br><span class="line"></span><br><span class="line">//配置body-parser</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;extended:false&#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line">//分发路由</span><br><span class="line">app.use(user);</span><br><span class="line"></span><br><span class="line">//监听端口</span><br><span class="line">app.listen(3000,function()&#123;</span><br><span class="line">  console.log(&apos;Server is Start&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>userModel.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">数据操作模块只负责处理数据</span><br><span class="line">*/</span><br><span class="line">const fs=require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">const DB=&apos;./db.json&apos;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">获得所有用户</span><br><span class="line">return []</span><br><span class="line">*/</span><br><span class="line">exports.findAllUser=function(callback)&#123;</span><br><span class="line">  fs.readFile(DB,&apos;utf-8&apos;,function(error,data)&#123;</span><br><span class="line">      if (error) &#123;</span><br><span class="line">        callback(error,null);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        callback(null,JSON.parse(data).users);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">根据id查找user</span><br><span class="line">*/</span><br><span class="line">exports.findUserById=function(id,callback)&#123;</span><br><span class="line">  fs.readFile(DB,&apos;utf-8&apos;,function(error,data)&#123;</span><br><span class="line">      if (error) &#123;</span><br><span class="line">        callback(error,null);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        //查找指定id的user</span><br><span class="line">        var users=JSON.parse(data).users;</span><br><span class="line">        var findUser=users.find(function(item)&#123;</span><br><span class="line">                    return item.id===id;</span><br><span class="line">        &#125;);</span><br><span class="line">        callback(null,findUser);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">添加用户</span><br><span class="line">*/</span><br><span class="line">exports.addUser=function(user,callback)&#123;</span><br><span class="line">  fs.readFile(DB,&apos;utf-8&apos;,function(error,data)&#123;</span><br><span class="line">      if (error) &#123;</span><br><span class="line">        callback(error);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        var users=JSON.parse(data).users;</span><br><span class="line">        //设置id</span><br><span class="line">        user.id =+users[users.length-1].id+1;</span><br><span class="line">        user.id=user.id.toString();</span><br><span class="line">        //添加</span><br><span class="line">        users.push(user);</span><br><span class="line"></span><br><span class="line">        var saveString=JSON.stringify(&#123;</span><br><span class="line">          users:users</span><br><span class="line">        &#125;);</span><br><span class="line">        //写入数据</span><br><span class="line">        fs.writeFile(DB,saveString,function(error)&#123;</span><br><span class="line">          if(error)&#123;</span><br><span class="line">            callback(error);</span><br><span class="line">          &#125;else &#123;</span><br><span class="line">            callback(null);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">修改用户</span><br><span class="line">*/</span><br><span class="line">exports.updateUser=function(user,callback)&#123;</span><br><span class="line">  fs.readFile(DB,&apos;utf-8&apos;,function(error,data)&#123;</span><br><span class="line">      if (error) &#123;</span><br><span class="line">        callback(error);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        var users=JSON.parse(data).users;</span><br><span class="line"></span><br><span class="line">        //查找指定id的user</span><br><span class="line">        var users=JSON.parse(data).users;</span><br><span class="line">        var findUser=users.find(function(item)&#123;</span><br><span class="line">                    return item.id===user.id;</span><br><span class="line">        &#125;);</span><br><span class="line">        //修改</span><br><span class="line">        for(var key in findUser)&#123;</span><br><span class="line">          findUser[key]=user[key];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var saveString=JSON.stringify(&#123;</span><br><span class="line">          users:users</span><br><span class="line">        &#125;);</span><br><span class="line">        //写入数据</span><br><span class="line">        fs.writeFile(DB,saveString,function(error)&#123;</span><br><span class="line">          if(error)&#123;</span><br><span class="line">            callback(error);</span><br><span class="line">          &#125;else &#123;</span><br><span class="line">            callback(null);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">删除用户</span><br><span class="line">*/</span><br><span class="line">exports.DeleteUser=function(id,callback)&#123;</span><br><span class="line">  fs.readFile(DB,&apos;utf-8&apos;,function(error,data)&#123;</span><br><span class="line">      if (error) &#123;</span><br><span class="line">        callback(error);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        //查找指定id的user</span><br><span class="line">        var users=JSON.parse(data).users;</span><br><span class="line">        var deleteUserID=users.findIndex(function(item)&#123;</span><br><span class="line">                    return item.id===id;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //删除数据</span><br><span class="line">        users.splice(deleteUserID,1);</span><br><span class="line">        var saveString=JSON.stringify(&#123;</span><br><span class="line">          users:users</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        //写入数据</span><br><span class="line">        fs.writeFile(DB,saveString,function(error)&#123;</span><br><span class="line">          if(error)&#123;</span><br><span class="line">            callback(error);</span><br><span class="line">          &#125;else &#123;</span><br><span class="line">            callback(null);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>router.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">//路由模块 根据请求路径配置请求方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//引包</span><br><span class="line">const express=require(&apos;express&apos;);</span><br><span class="line"></span><br><span class="line">//挂载Express的路由router</span><br><span class="line">const router=express.Router();</span><br><span class="line"></span><br><span class="line">//加载模型</span><br><span class="line">const userModel=require(&apos;../model/userModel&apos;);</span><br><span class="line"></span><br><span class="line">//设置文件数据库路径</span><br><span class="line">const dbPath=&apos;./db.json&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//配置请求</span><br><span class="line"></span><br><span class="line">//查看用户列表</span><br><span class="line">router.get(&apos;/user&apos;,function(req,res)&#123;</span><br><span class="line">  userModel.findAllUser(function(error,data)&#123;</span><br><span class="line">      if(error)&#123;</span><br><span class="line">        return res.status(500).send(&apos;Server Error!!&apos;);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        res.render(&apos;index.html&apos;,&#123;</span><br><span class="line">          user:data</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//添加用户页面</span><br><span class="line">router.get(&apos;/user/add&apos;,function(req,res)&#123;</span><br><span class="line">res.render(&apos;useradd.html&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//添加用户操作</span><br><span class="line">router.post(&apos;/user/add&apos;,function(req,res)&#123;</span><br><span class="line">var user=req.body;</span><br><span class="line">userModel.addUser(user,function(error)&#123;</span><br><span class="line">  if(error)&#123;</span><br><span class="line">    return res.status(500).send(&apos;Server Error!!&apos;);</span><br><span class="line">  &#125;else &#123;</span><br><span class="line">    res.redirect(&apos;/user&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//更新修改页面</span><br><span class="line">router.get(&apos;/user/update&apos;,function(req,res)&#123;</span><br><span class="line">var id=req.query.id;</span><br><span class="line">userModel.findUserById(id,function(error,data)&#123;</span><br><span class="line">  if (error) &#123;</span><br><span class="line">      return res.status(500).send(&apos;Server Error!!&apos;);</span><br><span class="line">  &#125;else &#123;</span><br><span class="line">    res.render(&apos;userUpdate.html&apos;,&#123;user:data&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//更新数据</span><br><span class="line">router.post(&apos;/user/update&apos;,function(req,res)&#123;</span><br><span class="line">  var user=req.body;</span><br><span class="line">  userModel.updateUser(user,function(error)&#123;</span><br><span class="line">    if(error)&#123;</span><br><span class="line">        return res.status(500).send(&apos;Server Error!!&apos;);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">      res.redirect(&apos;/user&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//删除数据</span><br><span class="line">router.get(&apos;/user/Delete&apos;,function(req,res)&#123;</span><br><span class="line">var id=req.query.id;</span><br><span class="line">userModel.DeleteUser(id,function(error)&#123;</span><br><span class="line">  if (error) &#123;</span><br><span class="line">      return res.status(500).send(&apos;Server Error!!&apos;);</span><br><span class="line">  &#125;else &#123;</span><br><span class="line">    res.redirect(&apos;/user&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//导出router</span><br><span class="line">module.exports=router;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Node-js是什么？&quot;&gt;&lt;a href=&quot;#Node-js是什么？&quot; class=&quot;headerlink&quot; title=&quot;Node.js是什么？&quot;&gt;&lt;/a&gt;Node.js是什么？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 &lt;/li&gt;
&lt;li&gt;Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="node" scheme="http://yoursite.com/categories/node/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
</feed>
