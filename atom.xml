<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小凡的耿</title>
  
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-19T11:33:37.959Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小凡的耿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leet-code</title>
    <link href="http://yoursite.com/2018/11/15/leet-code/"/>
    <id>http://yoursite.com/2018/11/15/leet-code/</id>
    <published>2018-11-15T11:05:53.000Z</published>
    <updated>2018-12-19T11:33:37.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9. 回文数"></a>9. 回文数</h3><p><strong>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</strong></p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 121</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶:"></a>进阶:</h4><p><strong>你能不将整数转为字符串来解决这个问题吗？</strong></p><h4 id="Java实现代码"><a href="#Java实现代码" class="headerlink" title="Java实现代码"></a>Java实现代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isPalindrome(int x) &#123;</span><br><span class="line">      // 排除x为负数，整十数(0对十取余也是0)</span><br><span class="line">      if(x &lt; 0 || (x % 10 ==0 &amp;&amp; x != 0) )&#123;</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line">      // x为正整数的时候</span><br><span class="line">      int env = 0;</span><br><span class="line">      while(x &gt; env) &#123;</span><br><span class="line">        env = env * 10 + x % 10;</span><br><span class="line">        x = x / 10;</span><br><span class="line">      &#125;</span><br><span class="line">      return (x == env || x == env / 10);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;9-回文数&quot;&gt;&lt;a href=&quot;#9-回文数&quot; class=&quot;headerlink&quot; title=&quot;9. 回文数&quot;&gt;&lt;/a&gt;9. 回文数&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。&lt;/st
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>java排序算法</title>
    <link href="http://yoursite.com/2018/11/13/java%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/11/13/java排序算法/</id>
    <published>2018-11-13T12:24:22.000Z</published>
    <updated>2018-12-19T07:01:14.012Z</updated>
    
    <content type="html"><![CDATA[<ol><li>冒泡算法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class TestBubble2 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">int[] arr1 = &#123;11, 221, 321, 21, 214, 21, 13&#125;;</span><br><span class="line">bubble(arr1);</span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line">&#125;</span><br><span class="line">public static void bubble(int[] arr) &#123;</span><br><span class="line">if(arr == null || arr.length &lt; 2) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int temp;</span><br><span class="line">boolean flag = true;</span><br><span class="line">for(int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">for(int j = 0; j &lt; arr.length - 1 - i; j++) &#123;</span><br><span class="line">if(arr[j] &gt; arr[j+1]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j+1];</span><br><span class="line">arr[j+1] = temp;</span><br><span class="line">flag = false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(flag) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;冒泡算法&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
      <category term="这是分类" scheme="http://yoursite.com/categories/%E8%BF%99%E6%98%AF%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="这是标签" scheme="http://yoursite.com/tags/%E8%BF%99%E6%98%AF%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>computer-networks</title>
    <link href="http://yoursite.com/2018/11/08/computer-networks/"/>
    <id>http://yoursite.com/2018/11/08/computer-networks/</id>
    <published>2018-11-08T12:11:06.000Z</published>
    <updated>2018-12-19T07:03:04.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h3><h4 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h4><p>定义：覆盖范围小，自己花钱买设备，带宽固定。<br>交换机 汇聚层 接入层</p><h4 id="广域网"><a href="#广域网" class="headerlink" title="广域网"></a>广域网</h4><h4 id="Internet"><a href="#Internet" class="headerlink" title="Internet"></a>Internet</h4><p>数据包(TCP/IP协议通信传输中的数据单位) 数据帧(数据链路层的协议数据单元，它包括三部分：帧头，数据部分，帧尾。) ip地址(最终要到的地址) mac地址(决定了吓一跳的地址)</p><h3 id="osi参考模型"><a href="#osi参考模型" class="headerlink" title="osi参考模型"></a>osi参考模型</h3><p>应用层：所有能产生网络流量的程序。<br>表示层：在传输之前是否进行加密或者压缩处理。(出现乱码)<br>会话层：查木马(netstat)<br>传输层：可靠传输，流量控制。<br>网络层：选择最佳路径，规划ip地址。<br>数据链路层：帧的开始和结束。透明传输，差错校验。<br>物理层：定义了网络接口的标准，电气标准。</p><h3 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h3><p>应用层<br>传输层(TCP头)：数据段<br>网络层(IP头)：数据包<br>数据链路层(MAC头)：数据帧<br>物理层</p><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>解决在连接在各种计算机的<strong>传输媒体</strong>上传输<strong>数据比特流</strong>。<br>机械特性，电气特性，功能特性，过程特性。<br>数字信号 =&gt; 调制解调器 =&gt; 模拟信号 =&gt; 调制解调器 =&gt; 数字信号</p><p>基本概念：单向通信，双向交替通信，双向同时通信。<br>基带信号：来自信源的信号。<br>带通信号：经过载波调制后的信号</p><p>常用的编码方式：比特流，归零制，曼彻斯特，差分曼彻斯特<br>基本带通调制方法：调幅，调频，调相。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;计算机网络&quot;&gt;&lt;a href=&quot;#计算机网络&quot; class=&quot;headerlink&quot; title=&quot;计算机网络&quot;&gt;&lt;/a&gt;计算机网络&lt;/h2&gt;&lt;h3 id=&quot;计算机网络概述&quot;&gt;&lt;a href=&quot;#计算机网络概述&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="这是分类" scheme="http://yoursite.com/categories/%E8%BF%99%E6%98%AF%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="这是标签" scheme="http://yoursite.com/tags/%E8%BF%99%E6%98%AF%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>java学习</title>
    <link href="http://yoursite.com/2018/10/30/java%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/10/30/java学习/</id>
    <published>2018-10-30T11:42:08.000Z</published>
    <updated>2018-12-19T07:01:07.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java基础语法"><a href="#java基础语法" class="headerlink" title="java基础语法"></a>java基础语法</h2><ol><li>对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li><li>类：类是一个模板，它描述一类对象的行为和状态。</li><li>方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</li><li>实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</li></ol><h3 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld &#123;</span><br><span class="line">  public static void main(String []args)&#123;</span><br><span class="line">    System.out.println(&quot;Hello,world!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h2><p>类可以看成创建对象的模板。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public  class Dog &#123;</span><br><span class="line">  String  breed;</span><br><span class="line">  int age;</span><br><span class="line">  String  color;</span><br><span class="line">  void  barking()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一个类可以包含以下类型变量</p><ul><li>局部变量：在方法、构造方法或者语句块中定义的变量。</li><li>成员变量：定义在类中，方法体之外的变量。</li><li>类变量:声明为static类型。</li></ul><p>创建对象</p><ol><li>声明一个对象</li><li>实例化，使用关键字new创建一个对象。</li><li>初始化，使用new创建对象是，会调用构造方法初始化对象。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Puppy &#123;</span><br><span class="line">  public Puppy(String name) &#123;</span><br><span class="line">    System.out.println(&quot;我的小狗的名字是&quot; + name);</span><br><span class="line">  &#125;</span><br><span class="line">  public static void main(String []args) &#123;</span><br><span class="line">    Puppy myPuppy = new Puppy(&quot;小黄&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="访问实例变量和方法"><a href="#访问实例变量和方法" class="headerlink" title="访问实例变量和方法"></a>访问实例变量和方法</h3><p><code>ObjectReference = new Constructor</code>,<br><code>ObjectReference.variablename</code>,<br><code>ObjectReference.methodName()</code></p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li>内置数据类型</li><li>引用数据类型</li></ul><h3 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h3><ol><li>byte：8位，有符号，最小值<code>-128（-2^7）</code>，最大值是<code>127（2^7-1）</code>。</li><li>short：16位，有符号，最小值<code>-32768（-2^15）</code>，最大值是32767<code>（2^15-1）</code>。</li><li>int：32位，有符号，最小值是<code>-2,147,483,648（-2^31）</code>，最大值是 <code>2,147,483,647（2^31 - 1）</code>。</li><li>long：64位，最小值是<code>9,223,372,036,854,775,808（-2^63）</code>，最大值是 <code>9,223,372,036,854,775,807（2^63 -1）</code>。</li><li>float：单精确，32位。</li><li>double：双精确，64位。</li><li>boolean：true,false,默认值是false。</li><li>char：单一的16位Unicode字符。</li></ol><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>引用类型指向一个对象，指向对象的变量是引用变量。对象，数值都是引用数据类型，默认值位null。例如：<code>Site site = new Site(&quot;Runoob&quot;)</code>。</p><h3 id="Java常量"><a href="#Java常量" class="headerlink" title="Java常量"></a>Java常量</h3><p>在Java中使用<code>final</code>关键字修饰变量，声明方式为<code>final double PI = 3.14.159</code>。<br>常用名常用小写表示变量，大写表示常量。</p><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p><strong>整型、常量、字符型</strong>可以混合运算，不同类型先转化为同一类型，然后进行运算，转换从低级到高级。</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><ul><li>类变量：独立于方法之外的变量，用<code>static</code>修饰。</li><li>实例变量：独立于方法之外的变量，<strong>不要</strong><code>static</code>修饰。</li><li>局部变量：类的方法之中的变量。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Variable &#123;</span><br><span class="line">  static  int a = 0;  //类变量</span><br><span class="line">  String str = &quot;hello,world&quot;; 实例变量</span><br><span class="line">  public void method()&#123;</span><br><span class="line">    int i = 1;  //局部变量</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ol><li>for循环</li><li>while循环</li><li>do while循环</li><li>foreach</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;java基础语法&quot;&gt;&lt;a href=&quot;#java基础语法&quot; class=&quot;headerlink&quot; title=&quot;java基础语法&quot;&gt;&lt;/a&gt;java基础语法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL数据库的学习</title>
    <link href="http://yoursite.com/2018/10/30/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/10/30/MYSQL数据库的学习/</id>
    <published>2018-10-30T04:17:12.000Z</published>
    <updated>2018-12-19T11:34:40.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h2><p>数据库（DATABASE）是按照数据结构来组织、存储、和管理数据的仓库。<br>关系型数据的特点：</p><ol><li>数据以表格的形式出现。</li><li>每行行各种记录的名称。</li><li>每列为记录名称所对象的数据域。</li><li>许多行和列组成一张表单。</li><li>若干的表单组成DATABASE。</li></ol><h2 id="MYSQL的安装"><a href="#MYSQL的安装" class="headerlink" title="MYSQL的安装"></a>MYSQL的安装</h2><p>详情请参照<a href="http://www.runoob.com/mysql/mysql-install.html" target="_blank" rel="noopener">该网站</a>配置。</p><h2 id="MYSQL的相关操作"><a href="#MYSQL的相关操作" class="headerlink" title="MYSQL的相关操作"></a>MYSQL的相关操作</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p><code>CREATE DATABASE 数据库名</code><br>例如：<code>CREATE DATABASE scholl</code>，创建一个名为<strong>scholl</strong>的数据库。<br>然后<code>use 数据库名</code>就使用该数据库了。</p><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p><code>DROP DATABASE 数据库名</code><br>例如：<code>DROP DATABASE scholl</code>，删除名为<strong>scholl</strong>的数据库。</p><h3 id="MYSQL的数据类型"><a href="#MYSQL的数据类型" class="headerlink" title="MYSQL的数据类型"></a>MYSQL的数据类型</h3><p>MYSQL支持多种类型，大致可以分为三类：数值、日期和字符串。</p><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。<br><img src="http://phed7ux2i.bkt.clouddn.com/MySQL%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B.png" alt=""></p><h4 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h4><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。<br><img src="http://phed7ux2i.bkt.clouddn.com/MySQL%E6%97%A5%E6%9C%9F.png" alt=""></p><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。<br><img src="http://phed7ux2i.bkt.clouddn.com/MySQL%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt=""></p><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><p>创建MySQL数据表需要以下信息</p><ul><li>表名</li><li>表字段名</li><li>定义每个表字段<br><code>CREATE TABLE 表名 (字段名 字段类型)</code><br>例如：<code>CREATE TABLE class (name VARCHAR,id INT)</code><h4 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h4><code>DROP TABLE 表名</code><br>例如：<code>DROP TABLE class</code>删除一个名为<strong>class</strong>的数据表<br><code>TRUNCATE TABLE 表名</code>删除表内所有数据，保留表结构。<br><code>DELETE FROM 表名 WHERE 条件</code>删除表内的数据，或者删除某一列。</li></ul><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p>MySQL表中使用<strong>INSERT INTO</strong>语句来插入数据。<br><code>INSERT INTO 表名 VALUES （）</code></p><ol><li>单行插入<br><code>INSERT INTO 表名 VALUES ()</code></li><li>多行插入<br><code>INSERT INTO 表名 VALUES (),()</code></li></ol><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><p>MySQL表中使用<strong>UPDATE 表名 SET 数据名称=新值 [WHERE 条件判断]</strong><br><code>UPDATE class SET grade=60 WHERE name=&quot;小凡&quot;</code></p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>MySQL表中使用<strong>DELETE FROM 表名 [WHERE 条件]</strong><br><code>DELETE FROM class WHERE grade&lt;60</code></p><h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><p><code>alter table 表名 rename  新表名</code><br><code>alter table 表名 add 新列名 新列的定义</code><br><code>alter table 表名 change 旧列名 新列名 新列的定义</code></p><p>一个例子：<br> 向学生表插入4行数据<br>INSERT INTO score (sname,snum,cname,grade) values(“王五”,3,”英语”,59.5),(“赵六”,4,”语文”,99.5),(“田七”,5,”数学”,7),(“王八”,6,”思想品德”,3);<br>– 2. 将所有不及格 的成绩在原来基础之上加5分<br>– 3.将王五的成绩降到40<br>– 4.删除表低于30分的成绩<br>– 5.两种方式删除表中所有数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE school;</span><br><span class="line">use scholl;</span><br><span class="line"></span><br><span class="line">CREATE TABLE score (</span><br><span class="line">  sname VARCHAR(4),</span><br><span class="line">  snum TINYINT,</span><br><span class="line">  cname VARCHAR(4),</span><br><span class="line">  grade float</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">INSERT INTO score (sname,snum,cname,grade) VALUES (&quot;王五&quot;,3,&quot;英语&quot;,59.5),(&quot;赵六&quot;,4,&quot;语文&quot;,99.5),(&quot;田七&quot;,5,&quot;数学&quot;,7),(&quot;王八&quot;,6,&quot;思想品德&quot;,3);</span><br><span class="line"></span><br><span class="line">UPDATE score SET grade = grade + 5 WHERES grade &lt; 60;</span><br><span class="line"></span><br><span class="line">UPDATE score SET grade = 40 WHERE sname = &quot;王五&quot;;</span><br><span class="line"></span><br><span class="line">DELETE FEOM score WHERE grade &lt; 30;</span><br><span class="line"></span><br><span class="line">DORP TABLE score  //删除表全部数据和表结构</span><br><span class="line">TRUNCATE TAVLE score  //删除表全部数据，保留表结构</span><br><span class="line">DELETE FROM score //删除表全部数据，表结构不变</span><br></pre></td></tr></table></figure></p><h2 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h2><p>数据库完整性（Database Integrity）是指数据库中数据在逻辑上的一致性、正确性、有效性和相容性。</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ol><li>实体完整性</li><li>域完整性</li><li>参照完整性</li><li>自定义完整性</li></ol><h3 id="主键-PRIMARY-KEY"><a href="#主键-PRIMARY-KEY" class="headerlink" title="主键(PRIMARY KEY)"></a>主键(PRIMARY KEY)</h3><p>定义：表中有一列或几列的值能用来唯一的表示表中的每一行。</p><p>两种方式添加主键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">CREATE TABLE class (</span><br><span class="line">  sname VARCHAR(4),</span><br><span class="line">  snum INT PRIMARY KEY,</span><br><span class="line">  sage TINYINT</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">ALTER TABLE class ADD PRIMARY KEY(snum)</span><br></pre></td></tr></table></figure></p><p>删除主键<br><code>ALTER TABLE class DROP PRIMARY KEY</code></p><h3 id="外键-FOREIGN-KEY"><a href="#外键-FOREIGN-KEY" class="headerlink" title="外键(FOREIGN KEY)"></a>外键(FOREIGN KEY)</h3><p>定义：<strong>字表</strong>对应于<strong>主表</strong>的列，体现了引用完整性、列完整性。主键唯一，外键多个。<br>添加外键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE class2 (</span><br><span class="line">  sname VARCHAR(4),</span><br><span class="line">  snum INT,</span><br><span class="line">  sage TINYINT,</span><br><span class="line">  PRIMARY KEY (snum),</span><br><span class="line">  FOREIGN KEY (sname) REFERENCES student(class1)</span><br><span class="line">)</span><br><span class="line">ALTER TABLE class2 ADD FOREIGN KEY (sname) REFERENCES student(class1)</span><br></pre></td></tr></table></figure></p><p>删除外键<br><code>ALTER TABLE class2 DROP FOREIGN KEY (sname)</code></p><h3 id="自增长-AUTO-INCREMENT"><a href="#自增长-AUTO-INCREMENT" class="headerlink" title="自增长(AUTO_INCREMENT)"></a>自增长(AUTO_INCREMENT)</h3><p>体现了实体的完整性，常搭配主键一起使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE class (</span><br><span class="line">  sname VARCHAR(8),</span><br><span class="line">  snum PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  sage TINYINT,</span><br><span class="line">  ssex VARCHAR(2)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="唯一约束-unique"><a href="#唯一约束-unique" class="headerlink" title="唯一约束(unique)"></a>唯一约束(unique)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE class (</span><br><span class="line">  sname VARCHAR(8),</span><br><span class="line">  snum PRIMARY KEY UNIQUE,</span><br><span class="line">  sage TINYINT,</span><br><span class="line">  ssex VARCHAR(2)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="非空约束-NOT-NULL"><a href="#非空约束-NOT-NULL" class="headerlink" title="非空约束(NOT NULL)"></a>非空约束(NOT NULL)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE class (</span><br><span class="line">  sname VARCHAR(8),</span><br><span class="line">  snum PRIMARY KEY NOT NULL,</span><br><span class="line">  sage TINYINT,</span><br><span class="line">  ssex VARCHAR(2)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="检查约束-SET-类型"><a href="#检查约束-SET-类型" class="headerlink" title="检查约束(SET(类型))"></a>检查约束(SET(类型))</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE class (</span><br><span class="line">  sname VARCHAR(8),</span><br><span class="line">  snum PRIMARY KEY,</span><br><span class="line">  sage TINYINT,</span><br><span class="line">  ssex VARCHAR(2) SET(&quot;男&quot;, &quot;女&quot;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="默认值约束-default"><a href="#默认值约束-default" class="headerlink" title="默认值约束(default)"></a>默认值约束(default)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE class (</span><br><span class="line">  sname VARCHAR(8),</span><br><span class="line">  snum PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  sage TINYINT DEFAULTE &quot;18&quot;,</span><br><span class="line">  ssex VARCHAR(2)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><ol><li>确保每列都保持原子性</li><li>确保每行都具有唯一性(拥有主键)</li><li>确保每列都和主键直接相关，而不是间接相关。</li></ol><p>一个实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">-- CREATE DATABASE admin;</span><br><span class="line">-- USE admin;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user_info (</span><br><span class="line">user_id INT PRIMARY KEY NOT NULL UNIQUE AUTO_INCREMENT,</span><br><span class="line">user_nickname VARCHAR(10) UNIQUE,</span><br><span class="line">user_iphoneVARCHAR(11)UNIQUE NOT NULL,</span><br><span class="line">user_emailVARCHAR(40)UNIQUE NOT NULL,</span><br><span class="line">user_sexVARCHAR(8)NOT NULL,</span><br><span class="line">user_ageTINYINT NOT NULL,</span><br><span class="line">user_addressVARCHAR(40) NOT NULL</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CREATE TABLE user_login_table (</span><br><span class="line">user_login_id INT PRIMARY KEY NOT NULL UNIQUE AUTO_INCREMENT,</span><br><span class="line">user_login_userId VARCHAR(20) UNIQUE NOT NULL,</span><br><span class="line">user_login_usernameVARCHAR(20)UNIQUE NOT NULL,</span><br><span class="line">user_login_passwordVARCHAR(20)NOT NULL</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CREATE TABLE product_table (</span><br><span class="line">product_id INT PRIMARY KEY NOT NULL UNIQUE AUTO_INCREMENT,</span><br><span class="line">product_name VARCHAR(20) NOT NULL,</span><br><span class="line">product_numINT NOT NULL,</span><br><span class="line">product_priceFLOATNOT NULL,</span><br><span class="line">product_descriptionVARCHAR(100),</span><br><span class="line">product_createDateDATENOT NULL,</span><br><span class="line">product_dateDATE</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CREATE TABLE shoppingcar(</span><br><span class="line">shoppingcar_idINT PRIMARY KEY NOT NULL UNIQUE AUTO_INCREMENT,</span><br><span class="line">shoppingcar_product_nameVARCHAR(20),</span><br><span class="line">shoppingcar_numINT,</span><br><span class="line">shoppingcar_userIdINT,</span><br><span class="line">FOREIGN KEY(shoppingcar_userId) REFERENCES user_info(user_id)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CREATE TABLE hadShopping(</span><br><span class="line">hadShopping_shoppingcar_idINT,</span><br><span class="line">hadShopping_buyTineDATE,</span><br><span class="line">hadShopping_addressVARCHAR(40),</span><br><span class="line">-- FOREIGN KEY(shoppingcar_userId) REFERENCES user_info(user_id)</span><br><span class="line">FOREIGN KEY(hadShopping_shoppingcar_id) REFERENCES product_table(product_id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL(数据查询语言)"></a>DQL(数据查询语言)</h2><ol><li>简单查询</li><li>复杂查询<blockquote><ol><li>聚合函数与分组</li><li>子查询</li><li>链接查询</li></ol></blockquote></li></ol><h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><p><code>SELECT 列名  FROM 表名 [WHERE 条件] [ORDER BY 列名]</code></p><ol><li>查询所有信息<br><code>SELECT * FROM student</code></li><li>按条件查询<br><code>SELECT * FROM student Where sex=&quot;nv&quot; ORDER BY age;</code></li><li>重命名AS<br><code>SELECT id AS 学生编号  FROM student</code></li><li>合并列作为一个新列<br><code>SELECT 工资＋奖金 AS 收入</code></li><li>限制行数（limit）<br><code>SELECT 列名 FROM 表名 WHERE age=10 LIMIT 起始行，行数;</code></li><li>不重复查询<br><code>SELECT DISTINCT  列名  FROM  表名</code></li><li>模糊查询<br><code>SELECT * FROM 表名 WHERE sname like &quot;c_&quot;;</code></li></ol><h3 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h3><h4 id="聚合函数与分组"><a href="#聚合函数与分组" class="headerlink" title="聚合函数与分组"></a>聚合函数与分组</h4><p>需求：查询数据表中的最高成绩，最低成绩，平均成绩，总成绩，成绩记录个数<br><code>COUNT, SUM, AVG, MAX, MIN</code>(行数， 总和， 平均， 最大， 最小)<br>使用方法：</p><ol><li><code>select count(列名) from 表名</code></li><li><code>select sum(列名) from 表名</code></li><li><code>select avg(列名) from 表名</code></li><li><code>select max(列名) from 表名</code></li><li><code>select mix(列名) from 表名</code><br>需求：查询每个同学的平均成绩。<br><code>select sname,sum(grade) from 表名 GROUND BY  courseId</code></li></ol><h4 id="多列分组"><a href="#多列分组" class="headerlink" title="多列分组"></a>多列分组</h4><p><code>select 列名 from 表名 GROUND BY 分组条件 HAVING 聚合条件s</code></p><h4 id="查询顺序"><a href="#查询顺序" class="headerlink" title="查询顺序"></a>查询顺序</h4><p><code>SELECT * FROM  表名  where 条件  GROUP BY  分组  HAVING 聚合函数过滤  ORDER BY   LIMIT</code></p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>定义：可以解决需要结合多张表进行查询的需求。<br>分类：</p><ol><li><p>查询语句作为另一条查询语句的一个条件的值。<br>需求：查询平均成绩大于60的学生姓名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select sname from student; //从student表中查询sname</span><br><span class="line">select sno from sc groud by sno having avg(score)&gt;60; //</span><br><span class="line">select sname from student where sno in (select sno from sc groud by sno having avg(score)&gt;60);</span><br></pre></td></tr></table></figure></li><li><p>查询语句作为另一条查询语句的一张表。<br>一般解题步骤：先找到核心需求，确定最终要查的表，将每个条件用单独的一条<code>select</code>语句表示出来，将所写出的语句通过表之间的外键联系起来。</p></li></ol><h3 id="视图查询"><a href="#视图查询" class="headerlink" title="视图查询"></a>视图查询</h3><p>保存查询语句集的展示形式，保存结果集的表</p><p><code>create view view_student_sc as</code></p><h3 id="链接查询"><a href="#链接查询" class="headerlink" title="链接查询"></a>链接查询</h3><p>结合多张表完成更复杂的查询需求<br>分类：</p><ol><li>内连接(INNER JOIN)<br><code>select sno,sname from student</code><br><code>select sno from sc groud by sno having avg(score) between 60 and 80</code><br><code>select sno,sname from student where sno in (select sno from sc groud by sno having avg(score) between 60 and 80)</code></li></ol><hr><p><code>select * from student inner join sc on sc.sno=student.sno groud by sno having avg(score) having between 60 and 80</code></p><ol start="2"><li>外联接（左外，右外）</li></ol><h2 id="高级特效-包含了DCL"><a href="#高级特效-包含了DCL" class="headerlink" title="高级特效(包含了DCL)"></a>高级特效(包含了DCL)</h2><ol><li>变量</li></ol><p>1.1 用户变量<br><code>SET @变量名=变量值</code> // 定义变量<br><code>select @变量名</code>  //输出变量<br>1.1.1 全局变量<br><code>show global variable</code>  查看所有的全局变量<br>在 <code>my-default.ini</code>文件里面修改全局变量<br>1.2 系统变量<br>1.3 局部变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create procedure pro_if()</span><br><span class="line">begin</span><br><span class="line">declare a tinyint;</span><br><span class="line">select min(age) into a from student;</span><br><span class="line">if a&lt;18 then</span><br><span class="line">select &quot;小孩子&quot;;</span><br><span class="line">elseif a&gt;18 and a&lt;60 then</span><br><span class="line">select &quot;大孩子&quot;;</span><br><span class="line">else</span><br><span class="line">select &quot;老孩子&quot;;</span><br><span class="line">end if;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">call pro_if;</span><br></pre></td></tr></table></figure></p><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><h4 id="带参数的"><a href="#带参数的" class="headerlink" title="带参数的"></a>带参数的</h4><ol><li>输入的形参 和 输出的形参</li></ol><ol start="2"><li>输出的形参</li></ol><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>体现自定义完整性，构建更加合理、健壮的数据库，数据检查问题。</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>将多个操作视为一个整体的概念<br>特性：原子性，一致性，隔离性，持久性。</p><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是数据库&quot;&gt;&lt;a href=&quot;#什么是数据库&quot; class=&quot;headerlink&quot; title=&quot;什么是数据库&quot;&gt;&lt;/a&gt;什么是数据库&lt;/h2&gt;&lt;p&gt;数据库（DATABASE）是按照数据结构来组织、存储、和管理数据的仓库。&lt;br&gt;关系型数据的特点：&lt;/p&gt;

      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MYSQL" scheme="http://yoursite.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB的使用</title>
    <link href="http://yoursite.com/2018/10/25/mongoDB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/25/mongoDB的使用/</id>
    <published>2018-10-25T14:46:08.000Z</published>
    <updated>2018-12-19T11:34:22.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是MongoDB？"><a href="#什么是MongoDB？" class="headerlink" title="什么是MongoDB？"></a>什么是MongoDB？</h2><ol><li>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</li><li>在高负载的情况下，添加更多的节点，可以保证服务器性能。</li><li>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</li><li>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</li></ol><h2 id="MongoDB的安装"><a href="#MongoDB的安装" class="headerlink" title="MongoDB的安装"></a>MongoDB的安装</h2><p>具体细节请参照<a href="http://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="noopener">该网站自行配置</a></p><h2 id="MongoDB概念解析"><a href="#MongoDB概念解析" class="headerlink" title="MongoDB概念解析"></a>MongoDB概念解析</h2><p><strong>MongoDB的存储结构</strong>和以前我们的关系型数据库的数据结构都是顶层是库，库下面是表，表下面是数据。但是MongoDB有所不同，库下面是集合，集合下面是文件</p><h2 id="基础Shell命令"><a href="#基础Shell命令" class="headerlink" title="基础Shell命令"></a>基础Shell命令</h2><ol><li>show dbs :显示已有数据库，如果你刚安装好，会默认有local、admin(config)，这是MongoDB的默认数据库，我们在新建库时是不允许起这些名称的。</li><li>use admin： 进入数据，也可以理解成为使用数据库。成功会显示：switched to db admin。</li><li>show collections: 显示数据库中的集合（关系型中叫表，我们要逐渐熟悉）。</li><li>db:显示当前位置，也就是你当前使用的数据库名称，这个命令算是最常用的，因为你在作任何操作的时候都要先查看一下自己所在的库，以免造成操作错误。</li></ol><h2 id="数据操作基础命令"><a href="#数据操作基础命令" class="headerlink" title="数据操作基础命令"></a>数据操作基础命令</h2><ol><li>use db（建立数据库）：use不仅可以进入一个数据库，如果你敲入的库不存在，它还可以帮你建立一个库。但是在没有集合前，它还是默认为空。</li><li>db.集合.insert( ):新建数据集合和插入文件（数据），当集合没有时，这时候就可以新建一个集合，并向里边插入数据。Demo：db.user.insert({“name”:”jspang”})</li><li>db.集合.find( ):查询所有数据，这条命令会列出集合下的所有数据，可以看到MongoDB是自动给我们加入了索引值的。Demo：db.user.find()</li><li>db.集合.findOne( ):查询第一个文件数据，这里需要注意的，所有MongoDB的组合单词都使用首字母小写的驼峰式写法。</li><li>db.集合.update({查询},{修改}):修改文件数据，第一个是查询条件，第二个是要修改成的值。这里注意的是可以多加文件数据项的，比如下面的例子。</li><li>db.集合.remove(条件)：删除文件数据，注意的是要跟一个条件。Demo:db.user.remove({“name”:”jspang”})</li><li>db.集合.drop( ):删除整个集合，这个在实际工作中一定要谨慎使用，如果是程序，一定要二次确认。</li><li>db.dropDatabase( ):删除整个数据库，在删除库时，一定要先进入数据库，然后再删除。实际工作中这个基本不用，实际工作可定需要保留数据和痕迹的。</li></ol><h2 id="mongoose的使用"><a href="#mongoose的使用" class="headerlink" title="mongoose的使用"></a>mongoose的使用</h2><p><strong>Mongoose是一个开源的封装好的实现Node和MongoDB数据通讯的数据建模库。</strong></p><h3 id="mongoose的安装"><a href="#mongoose的安装" class="headerlink" title="mongoose的安装"></a>mongoose的安装</h3><p><code>npm i mongoose -S</code></p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>在<code>database</code>目录下新建一个<code>init.js</code>文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">const mongoose = require(&apos;mongoose&apos;)</span><br><span class="line">const db = &quot;mongodb://localhost/smile-db&quot;</span><br><span class="line">exports.connect = ()=&gt;&#123;</span><br><span class="line">  //连接数据库</span><br><span class="line">  mongoose.connect(db)</span><br><span class="line"></span><br><span class="line">  let maxConnectTimes = 0 </span><br><span class="line">  return  new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    //把所有连接放到这里</span><br><span class="line">    //增加数据库监听事件</span><br><span class="line">    mongoose.connection.on(&apos;disconnected&apos;,()=&gt;&#123;</span><br><span class="line">      console.log(&apos;***********数据库断开***********&apos;)</span><br><span class="line">        if(maxConnectTimes&lt;3)&#123;</span><br><span class="line">          maxConnectTimes++</span><br><span class="line">          mongoose.connect(db)    </span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          reject()</span><br><span class="line">          throw new Error(&apos;数据库出现问题，程序无法搞定，请人为修理......&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    mongoose.connection.on(&apos;error&apos;,err=&gt;&#123;</span><br><span class="line">      console.log(&apos;***********数据库错误***********&apos;)</span><br><span class="line">      if(maxConnectTimes&lt;3)&#123;</span><br><span class="line">        maxConnectTimes++</span><br><span class="line">        mongoose.connect(db)   </span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        reject(err)</span><br><span class="line">          throw new Error(&apos;数据库出现问题，程序无法搞定，请人为修理......&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    //链接打开的时</span><br><span class="line">    mongoose.connection.once(&apos;open&apos;,()=&gt;&#123;</span><br><span class="line">      console.log(&apos;MongoDB connected successfully&apos;) </span><br><span class="line">      resolve()   </span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Mongoose的Schema建模"><a href="#Mongoose的Schema建模" class="headerlink" title="Mongoose的Schema建模"></a>Mongoose的Schema建模</h3><p><strong>Schema是以key-value形式Json格式的数据。</strong></p><p><strong>Schema中的数据类型</strong></p><ul><li>String ：字符串类型</li><li>Number ：数字类型</li><li>Date ： 日期类型</li><li>Boolean： 布尔类型</li><li>Buffer ： NodeJS buffer 类型</li><li>ObjectID ： 主键,一种特殊而且非常重要的类型</li><li>Mixed ：混合类型</li><li>Array ：集合类型</li></ul><h4 id="Mongoose中的三个概念"><a href="#Mongoose中的三个概念" class="headerlink" title="Mongoose中的三个概念"></a>Mongoose中的三个概念</h4><ol><li>schema ：用来定义表的模版，实现和MongoDB数据库的映射。用来实现每个字段的类型，长度，映射的字段，不具备表的操作能力。</li><li>model ：具备某张表操作能力的一个集合，是mongoose的核心能力。我们说的模型就是这个Mondel。</li><li>entity ：类似记录，由Model创建的实体，也具有影响数据库的操作能力。</li></ol><h4 id="初学定义一个Schema"><a href="#初学定义一个Schema" class="headerlink" title="初学定义一个Schema"></a>初学定义一个Schema</h4><p>我们在<code>database</code>文件夹下新建一个<code>Schema</code>文件下，然后创建一个<code>use.js</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const mongoose = require(&apos;mongoose&apos;)    //引入Mongoose</span><br><span class="line">const Schema = mongoose.Schema          //声明Schema</span><br><span class="line">let ObjectId = Schema.Types.ObjectId    //声明Object类型</span><br><span class="line">//创建我们的用户Schema</span><br><span class="line">const userSchema = new Schema(&#123;</span><br><span class="line">    UserId:ObjectId,</span><br><span class="line">    userName:&#123;unique:true,type:String&#125;,</span><br><span class="line">    password:String,</span><br><span class="line">    createAt:&#123;type:Date,default:Date.now()&#125;,</span><br><span class="line">    lastLoginAt:&#123;type:Date,default:Date.now()&#125;</span><br><span class="line">&#125;)</span><br><span class="line">//发布模型</span><br><span class="line">mongoose.model(&apos;User&apos;,userSchema)</span><br></pre></td></tr></table></figure></p><h2 id="载入Schema和插入查出数据"><a href="#载入Schema和插入查出数据" class="headerlink" title="载入Schema和插入查出数据"></a>载入Schema和插入查出数据</h2><p>我们在<code>init.js</code>文件中处理<strong>Schema</strong>。首先我们载入所有的<code>Schema</code>，然后再处理。<br>安装<em>glob</em><br><code>npm i glob -S</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const glob = require(&apos;glob&apos;)</span><br><span class="line">const &#123;resolve&#125; = require(&apos;path&apos;) //将一系列相对路径替换成绝对路径</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.initSchemas = () =&gt;&#123;</span><br><span class="line">    glob.sync(resolve(__dirname,&apos;./schema/&apos;,&apos;**/*.js&apos;)).forEach(require)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;)</span><br><span class="line">const app = new Koa()</span><br><span class="line">const mongoose = require(&apos;mongoose&apos;)</span><br><span class="line">const &#123;connect , initSchemas&#125; = require(&apos;./database/init.js&apos;)</span><br><span class="line">//立即执行函数</span><br><span class="line">;(async () =&gt;&#123;</span><br><span class="line">    await connect()</span><br><span class="line">    initSchemas()</span><br><span class="line">    const User = mongoose.model(&apos;User&apos;)</span><br><span class="line">    let oneUser = new User(&#123;userName:&apos;jspang13&apos;,password:&apos;123456&apos;&#125;)</span><br><span class="line">    oneUser.save().then(()=&gt;&#123;</span><br><span class="line">        console.log(&apos;插入成功&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">let  users = await  User.findOne(&#123;&#125;).exec()</span><br><span class="line">console.log(&apos;------------------&apos;)</span><br><span class="line">console.log(users)</span><br><span class="line">console.log(&apos;------------------&apos;)  </span><br><span class="line">&#125;)()</span><br><span class="line">app.use(async(ctx)=&gt;&#123;</span><br><span class="line">    ctx.body = &apos;&lt;h1&gt;hello Koa2&lt;/h1&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;[Server] starting at port 3000&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是MongoDB？&quot;&gt;&lt;a href=&quot;#什么是MongoDB？&quot; class=&quot;headerlink&quot; title=&quot;什么是MongoDB？&quot;&gt;&lt;/a&gt;什么是MongoDB？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;MongoDB 是由C++语言编写的，是一个基于分布式文
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MongoDB,数据库" scheme="http://yoursite.com/tags/MongoDB-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>node学习</title>
    <link href="http://yoursite.com/2018/10/24/node%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/10/24/node学习/</id>
    <published>2018-10-24T10:42:47.000Z</published>
    <updated>2018-12-19T11:35:06.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node-js是什么？"><a href="#Node-js是什么？" class="headerlink" title="Node.js是什么？"></a>Node.js是什么？</h2><ol><li>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 </li><li>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。</li></ol><h2 id="Node-js的安装和配置"><a href="#Node-js的安装和配置" class="headerlink" title="Node.js的安装和配置"></a>Node.js的安装和配置</h2><p>这个在这里不过多阐述，更多内容请自行百度。</p><h2 id="第一个Node-js文件"><a href="#第一个Node-js文件" class="headerlink" title="第一个Node.js文件"></a>第一个Node.js文件</h2><p>在一个目录下创建一个<code>nodejs</code>的文件夹,同时在该文件夹下创建一个<code>HelloWorld.js</code>文件，其内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;Hello,World!&apos;);</span><br></pre></td></tr></table></figure></p><p>然后打开终端，进入该文件目录下，使用<code>node HelloWorld.js</code>就可以在终端看到 <strong>Hello,World!</strong>的字了，并且第一个nodejs文件就完成了。</p><h2 id="node核心模块"><a href="#node核心模块" class="headerlink" title="node核心模块"></a>node核心模块</h2><p>node具有众多的核心模块，比较常用的有 <strong>fs,http,path</strong>等</p><h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><p>fs是node中用于 <strong>读取文件</strong>的，它常用的有 <strong>readFile()和writeFile()</strong>这两个方法，第一个参数都是文件地址，<em>readFile()</em>第二个参数就是一个回调函数，而<em>writeFile()</em>由于是写文件，故应当有写入内容，所以其第二个参数是data(string)，然后跟一个回调函数。</p><p>readFile()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;1.txt&apos;, (error, data) =&gt; &#123;</span><br><span class="line">  if(error) &#123;</span><br><span class="line">    console.log(&apos;读取文件失败，请稍后再试&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    console.log(data.toString())  //读取的数据大多是二进制数据，所以需要将其转换为字符类型</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>同理，writeFile()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.writeFile(&apos;2.txt&apos;, &apos;我是写入的内容&apos;, (error) =&gt; &#123;</span><br><span class="line">  if(error) &#123;</span><br><span class="line">    console.log(&apos;写入文件失败，请稍后再试&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    console.log(&apos;写入文件成功&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>比较上面两段代码，可以清楚的知道，readFile()方法有两个参数，而回调函数中有两个参数（error和data）；而writeFile()方法有三个参数，而回调函数就只有一个参数（error）了。</p><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><p>http模块主要用于搭建http服务器，我们可以利用其构建后端服务，使我们的应用在web服务器上使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http)</span><br><span class="line">var server = http.createServer()</span><br><span class="line">server.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">  var url = res.url;</span><br><span class="line">  if(url === &apos;/&apos;) &#123;</span><br><span class="line">    fs.readFile(&apos;./index.html&apos;, (error, data) =&gt; &#123;</span><br><span class="line">    if(error) &#123;</span><br><span class="line">      res.setHeader(&apos;Content-Type&apos;, &apos;text/plain;charset=utf-8&apos;)</span><br><span class="line">      res.end(&apos;读取文件失败，请稍后再试！&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      res.setHeader(&apos;Content-Type&apos;, &apos;text/html;charset=utf-8&apos;)</span><br><span class="line">      res.end(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(3000, () =&gt; &#123;</span><br><span class="line">  console.log(&apos;The server is starting at port 3000!&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>常用查询<a href="http://tool.oschina.net/" target="_blank" rel="noopener">Content-Type的网站</a></p><h2 id="node实现Apache"><a href="#node实现Apache" class="headerlink" title="node实现Apache"></a>node实现Apache</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;)</span><br><span class="line">var fs = require(&apos;fs&apos;)</span><br><span class="line">var server = http.createServer()</span><br><span class="line"></span><br><span class="line">server.on(&apos;request&apos;, function(req, res) &#123;</span><br><span class="line">  var url = req.url</span><br><span class="line">  var pathFile = &apos;index.html&apos;</span><br><span class="line">  if(pathFile !== &apos;/&apos;) &#123;</span><br><span class="line">    pathFile = url</span><br><span class="line">  &#125;</span><br><span class="line">  fs.readFile(pathFile, function(err, data) &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">      console.log(&apos;读取文件失败&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      res.end(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(3000, function() &#123;</span><br><span class="line">  console.log(&apos;the server is starting at port 3000!&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><p>express作为一个被node封装好的http框架，使用十分频繁和场景。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var app = new express()</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class="line">  res.end(&apos;这是主页面&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000, function() &#123;</span><br><span class="line">  console.log(&apos;The server is starting at port 3000!&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="使用express完成一个crud"><a href="#使用express完成一个crud" class="headerlink" title="使用express完成一个crud"></a>使用express完成一个crud</h3><ol><li><p>模版引擎的安装<br><code>npm i art-template express-art-template -S</code><br>在文件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">配置art-template模版引擎</span><br><span class="line">app.engine(&apos;html&apos;, require(&apos;express-art-template&apos;))</span><br><span class="line">渲染模版引擎</span><br><span class="line">res.render(&apos;index.html&apos;, &#123;</span><br><span class="line">  //  传入的对象通常是字符串需要通过JSON.parse()转移</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 引包</span><br><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var fs = require(&apos;fs&apos;)</span><br><span class="line"></span><br><span class="line">// 创建服务器</span><br><span class="line">var app = new express()</span><br><span class="line"></span><br><span class="line">// 配置公共资源</span><br><span class="line">app.use(&apos;/public/&apos;, express.static(&apos;./public&apos;))</span><br><span class="line"></span><br><span class="line">app.engine(&apos;html&apos;, require(&apos;express-art-template&apos;))</span><br><span class="line">// 配置请求</span><br><span class="line">app.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class="line">  fs.readFile(&apos;./db.json&apos;, &apos;utf8&apos;, function(err, data) &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">      return res.status(500).send(&apos;error!&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.render(&apos;index.html&apos;, &#123;</span><br><span class="line">      user: JSON.parse(data).user</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 监听请求</span><br><span class="line">app.listen(3000,function() &#123;</span><br><span class="line">  console.log(&apos;running 3000&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="router路由模块"><a href="#router路由模块" class="headerlink" title="router路由模块"></a>router路由模块</h3><p>通常情况下，我们将需要请求的路径封装成一个<code>router.js</code>文件，里面封装好我们需要的路径和相应的请求回调函数和逻辑，使我们的文件逻辑清晰。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var router = express.Router()</span><br><span class="line">var fs = require(&apos;fs&apos;)</span><br><span class="line"></span><br><span class="line">router.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class="line">  fs.readFile(&apos;./db.json&apos;, &apos;utf8&apos;, function(err, data) &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">      return res.status(500).send(&apos;error!&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.render(&apos;index.html&apos;, &#123;</span><br><span class="line">      user: JSON.parse(data).user</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">router.get(&apos;/students&apos;, function(req, res) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">router.post(&apos;/students&apos;, function(req, res) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">router.get(&apos;/students/new&apos;, function(req, res) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(&apos;/students/new&apos;, function(req, res) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = router</span><br></pre></td></tr></table></figure></p><p>而在我们的<code>app.js</code>文件中就可以写成这样了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 引包</span><br><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var router = require(&apos;./router.js&apos;)</span><br><span class="line"></span><br><span class="line">// 创建服务器</span><br><span class="line">var app = new express()</span><br><span class="line"></span><br><span class="line">// 配置公共资源</span><br><span class="line">app.use(&apos;/public/&apos;, express.static(&apos;./public&apos;))</span><br><span class="line"></span><br><span class="line">// 使用路由</span><br><span class="line">app.use(router)</span><br><span class="line"></span><br><span class="line">app.engine(&apos;html&apos;, require(&apos;express-art-template&apos;))</span><br><span class="line">// 配置请求</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 监听请求</span><br><span class="line">app.listen(3000,function() &#123;</span><br><span class="line">  console.log(&apos;running 3000&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = app</span><br></pre></td></tr></table></figure></p><p>最后完整版<br><code>app.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//引包</span><br><span class="line">const express=require(&apos;express&apos;);</span><br><span class="line">const fs=require(&apos;fs&apos;);</span><br><span class="line">const bodyParser=require(&apos;body-parser&apos;);</span><br><span class="line">//用户路由router</span><br><span class="line">const user=require(&apos;./router/user&apos;);</span><br><span class="line"></span><br><span class="line">//创建服务器</span><br><span class="line">const app=express();</span><br><span class="line"></span><br><span class="line">//配置公共资源</span><br><span class="line">app.use(express.static(&apos;./public&apos;));</span><br><span class="line"></span><br><span class="line">//配置使用art-template 模版引擎</span><br><span class="line">app.engine(&apos;html&apos;,require(&apos;express-art-template&apos;));</span><br><span class="line"></span><br><span class="line">//配置body-parser</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;extended:false&#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line">//分发路由</span><br><span class="line">app.use(user);</span><br><span class="line"></span><br><span class="line">//监听端口</span><br><span class="line">app.listen(3000,function()&#123;</span><br><span class="line">  console.log(&apos;Server is Start&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>userModel.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">数据操作模块只负责处理数据</span><br><span class="line">*/</span><br><span class="line">const fs=require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">const DB=&apos;./db.json&apos;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">获得所有用户</span><br><span class="line">return []</span><br><span class="line">*/</span><br><span class="line">exports.findAllUser=function(callback)&#123;</span><br><span class="line">  fs.readFile(DB,&apos;utf-8&apos;,function(error,data)&#123;</span><br><span class="line">      if (error) &#123;</span><br><span class="line">        callback(error,null);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        callback(null,JSON.parse(data).users);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">根据id查找user</span><br><span class="line">*/</span><br><span class="line">exports.findUserById=function(id,callback)&#123;</span><br><span class="line">  fs.readFile(DB,&apos;utf-8&apos;,function(error,data)&#123;</span><br><span class="line">      if (error) &#123;</span><br><span class="line">        callback(error,null);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        //查找指定id的user</span><br><span class="line">        var users=JSON.parse(data).users;</span><br><span class="line">        var findUser=users.find(function(item)&#123;</span><br><span class="line">                    return item.id===id;</span><br><span class="line">        &#125;);</span><br><span class="line">        callback(null,findUser);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">添加用户</span><br><span class="line">*/</span><br><span class="line">exports.addUser=function(user,callback)&#123;</span><br><span class="line">  fs.readFile(DB,&apos;utf-8&apos;,function(error,data)&#123;</span><br><span class="line">      if (error) &#123;</span><br><span class="line">        callback(error);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        var users=JSON.parse(data).users;</span><br><span class="line">        //设置id</span><br><span class="line">        user.id =+users[users.length-1].id+1;</span><br><span class="line">        user.id=user.id.toString();</span><br><span class="line">        //添加</span><br><span class="line">        users.push(user);</span><br><span class="line"></span><br><span class="line">        var saveString=JSON.stringify(&#123;</span><br><span class="line">          users:users</span><br><span class="line">        &#125;);</span><br><span class="line">        //写入数据</span><br><span class="line">        fs.writeFile(DB,saveString,function(error)&#123;</span><br><span class="line">          if(error)&#123;</span><br><span class="line">            callback(error);</span><br><span class="line">          &#125;else &#123;</span><br><span class="line">            callback(null);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">修改用户</span><br><span class="line">*/</span><br><span class="line">exports.updateUser=function(user,callback)&#123;</span><br><span class="line">  fs.readFile(DB,&apos;utf-8&apos;,function(error,data)&#123;</span><br><span class="line">      if (error) &#123;</span><br><span class="line">        callback(error);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        var users=JSON.parse(data).users;</span><br><span class="line"></span><br><span class="line">        //查找指定id的user</span><br><span class="line">        var users=JSON.parse(data).users;</span><br><span class="line">        var findUser=users.find(function(item)&#123;</span><br><span class="line">                    return item.id===user.id;</span><br><span class="line">        &#125;);</span><br><span class="line">        //修改</span><br><span class="line">        for(var key in findUser)&#123;</span><br><span class="line">          findUser[key]=user[key];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var saveString=JSON.stringify(&#123;</span><br><span class="line">          users:users</span><br><span class="line">        &#125;);</span><br><span class="line">        //写入数据</span><br><span class="line">        fs.writeFile(DB,saveString,function(error)&#123;</span><br><span class="line">          if(error)&#123;</span><br><span class="line">            callback(error);</span><br><span class="line">          &#125;else &#123;</span><br><span class="line">            callback(null);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">删除用户</span><br><span class="line">*/</span><br><span class="line">exports.DeleteUser=function(id,callback)&#123;</span><br><span class="line">  fs.readFile(DB,&apos;utf-8&apos;,function(error,data)&#123;</span><br><span class="line">      if (error) &#123;</span><br><span class="line">        callback(error);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        //查找指定id的user</span><br><span class="line">        var users=JSON.parse(data).users;</span><br><span class="line">        var deleteUserID=users.findIndex(function(item)&#123;</span><br><span class="line">                    return item.id===id;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //删除数据</span><br><span class="line">        users.splice(deleteUserID,1);</span><br><span class="line">        var saveString=JSON.stringify(&#123;</span><br><span class="line">          users:users</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        //写入数据</span><br><span class="line">        fs.writeFile(DB,saveString,function(error)&#123;</span><br><span class="line">          if(error)&#123;</span><br><span class="line">            callback(error);</span><br><span class="line">          &#125;else &#123;</span><br><span class="line">            callback(null);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>router.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">//路由模块 根据请求路径配置请求方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//引包</span><br><span class="line">const express=require(&apos;express&apos;);</span><br><span class="line"></span><br><span class="line">//挂载Express的路由router</span><br><span class="line">const router=express.Router();</span><br><span class="line"></span><br><span class="line">//加载模型</span><br><span class="line">const userModel=require(&apos;../model/userModel&apos;);</span><br><span class="line"></span><br><span class="line">//设置文件数据库路径</span><br><span class="line">const dbPath=&apos;./db.json&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//配置请求</span><br><span class="line"></span><br><span class="line">//查看用户列表</span><br><span class="line">router.get(&apos;/user&apos;,function(req,res)&#123;</span><br><span class="line">  userModel.findAllUser(function(error,data)&#123;</span><br><span class="line">      if(error)&#123;</span><br><span class="line">        return res.status(500).send(&apos;Server Error!!&apos;);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        res.render(&apos;index.html&apos;,&#123;</span><br><span class="line">          user:data</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//添加用户页面</span><br><span class="line">router.get(&apos;/user/add&apos;,function(req,res)&#123;</span><br><span class="line">res.render(&apos;useradd.html&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//添加用户操作</span><br><span class="line">router.post(&apos;/user/add&apos;,function(req,res)&#123;</span><br><span class="line">var user=req.body;</span><br><span class="line">userModel.addUser(user,function(error)&#123;</span><br><span class="line">  if(error)&#123;</span><br><span class="line">    return res.status(500).send(&apos;Server Error!!&apos;);</span><br><span class="line">  &#125;else &#123;</span><br><span class="line">    res.redirect(&apos;/user&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//更新修改页面</span><br><span class="line">router.get(&apos;/user/update&apos;,function(req,res)&#123;</span><br><span class="line">var id=req.query.id;</span><br><span class="line">userModel.findUserById(id,function(error,data)&#123;</span><br><span class="line">  if (error) &#123;</span><br><span class="line">      return res.status(500).send(&apos;Server Error!!&apos;);</span><br><span class="line">  &#125;else &#123;</span><br><span class="line">    res.render(&apos;userUpdate.html&apos;,&#123;user:data&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//更新数据</span><br><span class="line">router.post(&apos;/user/update&apos;,function(req,res)&#123;</span><br><span class="line">  var user=req.body;</span><br><span class="line">  userModel.updateUser(user,function(error)&#123;</span><br><span class="line">    if(error)&#123;</span><br><span class="line">        return res.status(500).send(&apos;Server Error!!&apos;);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">      res.redirect(&apos;/user&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//删除数据</span><br><span class="line">router.get(&apos;/user/Delete&apos;,function(req,res)&#123;</span><br><span class="line">var id=req.query.id;</span><br><span class="line">userModel.DeleteUser(id,function(error)&#123;</span><br><span class="line">  if (error) &#123;</span><br><span class="line">      return res.status(500).send(&apos;Server Error!!&apos;);</span><br><span class="line">  &#125;else &#123;</span><br><span class="line">    res.redirect(&apos;/user&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//导出router</span><br><span class="line">module.exports=router;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Node-js是什么？&quot;&gt;&lt;a href=&quot;#Node-js是什么？&quot; class=&quot;headerlink&quot; title=&quot;Node.js是什么？&quot;&gt;&lt;/a&gt;Node.js是什么？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Node.js 是一个基于 Chrome V8 引擎的 
      
    
    </summary>
    
      <category term="node" scheme="http://yoursite.com/categories/node/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
</feed>
